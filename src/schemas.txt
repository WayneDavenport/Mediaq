create table public.users (
  created_at timestamp with time zone not null default now(),
  email text not null,
  password text null,
  username text not null,
  reading_speed real null,
  id uuid not null default gen_random_uuid (),
  verification_token text null,
  is_verified boolean null default false,
  verified_at timestamp without time zone null,
  google_id text null,
  avatar_url text null,
  first_name character varying(255) null,
  last_name character varying(255) null,
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email),
  constraint users_id_key unique (id),
  constraint users_username_key unique (username)
) TABLESPACE pg_default;


create table public.media_items (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  title text null,
  category text null,
  media_type text null,
  description text null,
  poster_path text null,
  backdrop_path text null,
  user_email text null,
  user_id uuid null,
  genres text null,
  constraint media_items_pkey primary key (id),
  constraint media_items_user_id_fkey foreign KEY (user_id) references users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.user_media_progress (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  queue_number bigint null,
  duration real null,
  completed_duration bigint null,
  completed boolean null,
  user_id uuid not null,
  pages_completed bigint null,
  episodes_completed bigint null,
  constraint user_media_progress_pkey primary key (id),
  constraint user_media_progress_id_fkey foreign KEY (id) references media_items (id) on update CASCADE on delete CASCADE,
  constraint user_media_progress_user_id_fkey foreign KEY (user_id) references users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.books (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  authors text null,
  average_rating bigint null,
  categories text null,
  estimated_reading_time bigint null,
  google_books_id text null,
  isbn text null,
  language text null,
  page_count bigint null,
  preview_link text null,
  published_date text null,
  publisher text null,
  ratings_count integer null,
  reading_speed smallint null,
  user_id uuid not null,
  constraint books_pkey primary key (id),
  constraint books_id_fkey foreign KEY (id) references media_items (id) on update CASCADE on delete CASCADE,
  constraint books_user_id_fkey foreign KEY (user_id) references users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.games (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  achievements_count bigint null,
  average_playtime bigint null,
  esrb_rating text null,
  metacritic integer null,
  platforms text null,
  publishers text null,
  rating double precision null,
  rating_count bigint null,
  rawg_id bigint null,
  release_date text null,
  website text null,
  genres text null,
  user_id uuid not null,
  constraint movies_pkey primary key (id),
  constraint games_id_key unique (id),
  constraint games_id_fkey foreign KEY (id) references media_items (id) on update CASCADE on delete CASCADE,
  constraint games_user_id_fkey foreign KEY (user_id) references users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.movies (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  director text null,
  original_language text null,
  release_date text null,
  tmdb_id bigint null,
  vote_average double precision null,
  runtime bigint null,
  user_id uuid not null,
  constraint movies_pkey1 primary key (id),
  constraint movies_id_fkey1 foreign KEY (id) references media_items (id) on update CASCADE on delete CASCADE,
  constraint movies_user_id_fkey foreign KEY (user_id) references users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.tv_shows (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  average_runtime bigint null,
  episode_run_times bigint null,
  original_language text null,
  release_date text null,
  seasons bigint null,
  tmdb_id bigint null,
  total_episodes bigint null,
  vote_average integer null,
  user_id uuid not null,
  constraint tv_shows_pkey primary key (id),
  constraint tv_shows_id_fkey foreign KEY (id) references media_items (id) on update CASCADE on delete CASCADE,
  constraint tv_shows_user_id_fkey foreign KEY (user_id) references users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.locked_items (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  key_parent_text text null,
  goal_time bigint null,
  goal_pages bigint null,
  goal_episodes bigint null,
  completed_time bigint null,
  pages_completed bigint null,
  episodes_completed bigint null,
  lock_type text null,
  key_parent_id bigint null,
  user_id uuid not null,
  constraint locked_items_pkey primary key (id, created_at),
  constraint locked_items_id_fkey foreign KEY (id) references media_items (id) on update CASCADE on delete CASCADE,
  constraint locked_items_key_parent_id_fkey foreign KEY (key_parent_id) references media_items (id) on update CASCADE on delete CASCADE,
  constraint locked_items_user_id_fkey foreign KEY (user_id) references users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create table public.friend_requests (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  sender_id uuid not null,
  receiver_id uuid not null,
  status text not null default 'pending'::text,
  constraint friend_requests_pkey primary key (id),
  constraint friend_requests_unique_pairs unique (sender_id, receiver_id),
  constraint friend_requests_receiver_id_fkey foreign KEY (receiver_id) references users (id) on update CASCADE on delete CASCADE,
  constraint friend_requests_sender_id_fkey foreign KEY (sender_id) references users (id) on update CASCADE on delete CASCADE,
  constraint friend_requests_no_self_requests check ((sender_id <> receiver_id)),
  constraint friend_requests_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'accepted'::text,
          'rejected'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_friend_requests_sender_id on public.friend_requests using btree (sender_id) TABLESPACE pg_default;

create index IF not exists idx_friend_requests_receiver_id on public.friend_requests using btree (receiver_id) TABLESPACE pg_default;

create index IF not exists idx_friend_requests_status on public.friend_requests using btree (status) TABLESPACE pg_default;

create table public.friends (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  friend_user_name text not null,
  user_id uuid null,
  friend_id uuid not null,
  constraint friends_pkey primary key (id, friend_id),
  constraint friends_friend_id_key unique (friend_id),
  constraint friends_friend_id_fkey foreign KEY (friend_id) references users (id) on update CASCADE on delete CASCADE,
  constraint friends_friend_user_name_fkey foreign KEY (friend_user_name) references users (username),
  constraint friends_user_id_fkey foreign KEY (user_id) references users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;



create table public.comments (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  media_item_id bigint not null,
  user_id uuid not null,
  content text not null,
  constraint comments_pkey primary key (id),
  constraint comments_media_item_id_fkey foreign KEY (media_item_id) references media_items (id) on delete CASCADE,
  constraint comments_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_comments_media_item_id on public.comments using btree (media_item_id) TABLESPACE pg_default;

create index IF not exists idx_comments_user_id on public.comments using btree (user_id) TABLESPACE pg_default;


create table public.comment_replies (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  comment_id bigint not null,
  user_id uuid not null,
  content text not null,
  constraint comment_replies_pkey primary key (id),
  constraint comment_replies_comment_id_fkey foreign KEY (comment_id) references comments (id) on delete CASCADE,
  constraint comment_replies_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_comment_replies_comment_id on public.comment_replies using btree (comment_id) TABLESPACE pg_default;

create index IF not exists idx_comment_replies_user_id on public.comment_replies using btree (user_id) TABLESPACE pg_default;